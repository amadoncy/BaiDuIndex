# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtWidgets import (QWidget, QLineEdit, QPushButton,
                             QCheckBox, QVBoxLayout, QHBoxLayout, QLabel,
                             QMainWindow, QMessageBox, QFrame, QGraphicsDropShadowEffect)
from PyQt5.QtCore import (Qt, QCoreApplication, QMetaObject, QTimer,
                          QPropertyAnimation, QPoint, QEasingCurve, QParallelAnimationGroup)
from PyQt5.QtGui import QFont, QPalette, QBrush, QImage, QIcon, QColor
import os
import logging
from datetime import datetime
from utils.db_utils import DatabaseConnection
from config.user_config import UserConfig
from utils.captcha_utils import CaptchaManager
from gui.main_window import WelcomeWindow


class WelcomeToast(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Tool | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setAttribute(Qt.WA_ShowWithoutActivating)

        # 创建外层容器
        self.container = QFrame(self)
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.addWidget(self.container)

        # 创建内层布局
        inner_layout = QVBoxLayout(self.container)
        inner_layout.setContentsMargins(25, 20, 25, 20)

        # 创建欢迎标签
        self.welcome_label = QLabel("👋 欢迎回来")
        self.welcome_label.setAlignment(Qt.AlignCenter)
        self.welcome_label.setFont(QFont("Microsoft YaHei", 20, QFont.Bold))
        self.welcome_label.setStyleSheet("""
            color: white;
            padding: 5px;
        """)
        inner_layout.addWidget(self.welcome_label)

        # 创建用户名标签
        self.username_label = QLabel()
        self.username_label.setAlignment(Qt.AlignCenter)
        self.username_label.setFont(QFont("Microsoft YaHei", 18))
        self.username_label.setStyleSheet("""
            color: rgba(255, 255, 255, 0.9);
            padding: 5px;
        """)
        inner_layout.addWidget(self.username_label)

        # 添加分隔线
        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setStyleSheet("""
            background-color: rgba(255, 255, 255, 0.3);
            margin: 10px 40px;
        """)
        inner_layout.addWidget(separator)

        # 创建登录时间标签
        self.time_label = QLabel()
        self.time_label.setAlignment(Qt.AlignCenter)
        self.time_label.setFont(QFont("Microsoft YaHei", 12))
        self.time_label.setStyleSheet("""
            color: rgba(255, 255, 255, 0.8);
            padding: 5px;
        """)
        inner_layout.addWidget(self.time_label)

        # 设置容器样式 - 使用渐变背景
        self.container.setStyleSheet("""
            QFrame {
                background: qlineargradient(
                    x1: 0, y1: 0, x2: 1, y2: 1,
                    stop: 0 #2962FF,
                    stop: 0.5 #3949AB,
                    stop: 1 #1E88E5
                );
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.3);
            }
        """)

        # 添加阴影效果
        shadow = QGraphicsDropShadowEffect(self)
        shadow.setBlurRadius(20)
        shadow.setColor(QColor(0, 0, 0, 160))
        shadow.setOffset(0, 4)
        self.container.setGraphicsEffect(shadow)

        # 初始化动画
        self.fade_anim = QPropertyAnimation(self, b"windowOpacity")
        self.fade_anim.setDuration(400)  # 稍微延长动画时间

        # 初始化位置动画
        self.pos_anim = QPropertyAnimation(self, b"pos")
        self.pos_anim.setDuration(400)
        self.pos_anim.setEasingCurve(QEasingCurve.OutBack)  # 添加弹性效果

    def show_message(self, username, last_login):
        # 设置消息内容
        self.username_label.setText(username)
        self.time_label.setText(f"上次登录时间：\n{last_login}")

        # 调整大小以适应内容
        self.container.adjustSize()
        self.setFixedSize(350, 220)  # 稍微增加大小
        self.container.setFixedSize(self.size())

        # 计算位置
        parent = self.parent()
        if parent:
            parent_rect = parent.geometry()
            target_x = parent_rect.x() + (parent_rect.width() - self.width()) // 2
            target_y = parent_rect.y() + (parent_rect.height() - self.height()) // 2

            # 设置初始位置（从上方滑入）
            start_y = target_y - 50
            self.move(target_x, start_y)

            # 设置位置动画
            self.pos_anim.setStartValue(QPoint(target_x, start_y))
            self.pos_anim.setEndValue(QPoint(target_x, target_y))

        # 显示并开始动画
        self.show()
        self.fade_anim.setStartValue(0.0)
        self.fade_anim.setEndValue(1.0)
        self.fade_anim.start()
        self.pos_anim.start()

        # 2秒后开始淡出
        QTimer.singleShot(2000, self.start_fade_out)

    def start_fade_out(self):
        """开始淡出动画"""
        # 创建新的动画组
        self.anim_group = QParallelAnimationGroup(self)

        # 设置淡出动画
        fade_out = QPropertyAnimation(self, b"windowOpacity", self)
        fade_out.setStartValue(1.0)
        fade_out.setEndValue(0.0)
        fade_out.setDuration(400)

        # 设置上移动画
        move_up = QPropertyAnimation(self, b"pos", self)
        current_pos = self.pos()
        move_up.setStartValue(current_pos)
        move_up.setEndValue(QPoint(current_pos.x(), current_pos.y() - 50))
        move_up.setDuration(400)
        move_up.setEasingCurve(QEasingCurve.InCubic)

        # 添加动画到组
        self.anim_group.addAnimation(fade_out)
        self.anim_group.addAnimation(move_up)

        # 动画结束后关闭窗口
        self.anim_group.finished.connect(self.close)

        # 开始动画组
        self.anim_group.start()


class LoginWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        # 设置窗口图标
        icon_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'resources', 'logo.png')
        if os.path.exists(icon_path):
            self.setWindowIcon(QIcon(icon_path))
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.db = DatabaseConnection()
        self.user_config = UserConfig()
        self.captcha_manager = CaptchaManager()
        self.current_captcha_id = None

        # 绑定登录按钮点击事件
        self.ui.pushButton.clicked.connect(self.handle_login)

        # 绑定验证码刷新按钮事件
        self.ui.refresh_captcha_btn.clicked.connect(self.refresh_captcha)

        # 绑定注册按钮事件
        self.ui.register_btn.clicked.connect(self.show_register)

        # 绑定忘记密码链接事件
        self.ui.forget_password_link.mousePressEvent = self.show_reset_password

        # 加载保存的登录信息
        self.load_saved_login_info()

        # 生成初始验证码
        self.refresh_captcha()

        # 延迟执行自动登录
        QTimer.singleShot(1000, self.check_auto_login)

    def check_auto_login(self):
        """检查是否需要自动登录"""
        if self.ui.checkBox.isChecked() and self.ui.username.text() and self.ui.password.text():
            self.handle_login()

    def refresh_captcha(self):
        """刷新验证码"""
        try:
            captcha_id, captcha_image = self.captcha_manager.generate_captcha()
            if captcha_id and captcha_image:
                self.current_captcha_id = captcha_id
                self.ui.captcha_label.setPixmap(captcha_image)
        except Exception as e:
            logging.error(f"刷新验证码失败: {str(e)}")
            QMessageBox.warning(self, "错误", "刷新验证码失败，请检查Redis服务是否启动")

    def load_saved_login_info(self):
        """加载保存的登录信息"""
        login_info = self.user_config.get_login_info()

        if login_info['remember_password']:
            self.ui.username.setText(login_info['username'])
            self.ui.password.setText(login_info['password'])
            self.ui.checkBox_2.setChecked(True)

        if login_info['auto_login']:
            self.ui.checkBox.setChecked(True)

    def handle_login(self):
        """处理登录逻辑"""
        logging.debug("开始处理登录请求...")
        username = self.ui.username.text().strip()
        password = self.ui.password.text().strip()
        captcha = self.ui.yanzhengma.text().strip()

        logging.debug(f"用户名: {username}, 密码长度: {len(password)}, 验证码: {captcha}")

        if not username or not password:
            logging.warning("用户名或密码为空")
            QMessageBox.warning(self, "警告", "用户名和密码不能为空！")
            return

        if not captcha:
            logging.warning("验证码为空")
            QMessageBox.warning(self, "警告", "请输入验证码！")
            return

        # 验证验证码
        logging.debug("开始验证验证码...")
        if not self.captcha_manager.verify_captcha(self.current_captcha_id, captcha):
            logging.warning("验证码验证失败")
            QMessageBox.warning(self, "错误", "验证码错误或已过期！")
            self.refresh_captcha()
            self.ui.yanzhengma.clear()
            return

        # 验证登录
        logging.debug("开始验证登录信息...")
        success, last_login = self.verify_login(username, password)
        if success:
            logging.debug("登录成功")
            # 保存登录信息
            self.save_login_info(username, password)
            logging.debug("已保存登录信息")

            # 显示欢迎提示
            toast = WelcomeToast(self)
            last_login_str = last_login.strftime("%Y年%m月%d日 %H:%M") if last_login else "首次登录"
            toast.show_message(username, last_login_str)
            logging.debug("已显示欢迎提示")

            # 延迟显示主界面
            QTimer.singleShot(2500, lambda: self.show_main_window(username))
            logging.debug("已设置延迟显示主界面")
        else:
            logging.warning("登录失败：用户名或密码错误")
            QMessageBox.warning(self, "错误", "用户名或密码错误！")
            self.refresh_captcha()
            self.ui.yanzhengma.clear()

    def verify_login(self, username, password):
        """验证登录信息"""
        try:
            logging.debug(f"开始验证登录信息 - 用户名: {username}")

            if not self.db.connect():
                logging.error("数据库连接失败")
                QMessageBox.warning(self, "错误", "数据库连接失败，请稍后重试！")
                return False, None

            logging.debug("数据库连接成功")

            # 获取用户信息和上次登录时间
            query = "SELECT id, last_login FROM users WHERE username = %s AND password = %s"
            logging.debug(f"执行查询语句: {query}")
            logging.debug(f"查询参数: username={username}")

            self.db.cursor.execute(query, (username, password))
            result = self.db.cursor.fetchone()

            if result:
                user_id, last_login = result
                logging.debug(f"找到用户记录 - ID: {user_id}, 上次登录时间: {last_login}")

                # 更新最后登录时间
                update_query = "UPDATE users SET last_login = NOW() WHERE id = %s"
                logging.debug(f"执行更新语句: {update_query}, 参数: id={user_id}")
                self.db.cursor.execute(update_query, (user_id,))
                self.db.connection.commit()
                logging.debug("登录时间更新成功")
                return True, last_login
            else:
                logging.warning("未找到匹配的用户记录")
                # 检查用户是否存在
                check_query = "SELECT id FROM users WHERE username = %s"
                self.db.cursor.execute(check_query, (username,))
                if self.db.cursor.fetchone():
                    logging.warning("用户名存在但密码错误")
                    QMessageBox.warning(self, "错误", "密码错误！")
                else:
                    logging.warning("用户名不存在")
                    QMessageBox.warning(self, "错误", "用户名不存在！")
                return False, None

        except Exception as e:
            logging.error(f"登录验证失败：{str(e)}")
            QMessageBox.warning(self, "错误", f"登录验证失败：{str(e)}\n请稍后重试！")
            return False, None
        finally:
            logging.debug("关闭数据库连接")
            self.db.close()
        return False, None

    def save_login_info(self, username, password):
        """保存登录信息"""
        remember_password = self.ui.checkBox_2.isChecked()
        auto_login = self.ui.checkBox.isChecked()

        self.user_config.save_login_info(
            username=username,
            password=password,
            remember_password=remember_password,
            auto_login=auto_login
        )

    def show_register(self):
        """显示注册窗口"""
        try:
            logging.info("开始加载注册窗口...")

            # 检查register_window.py文件是否存在
            register_file = os.path.join(os.path.dirname(__file__), 'register_window.py')
            if not os.path.exists(register_file):
                logging.error(f"注册窗口文件不存在: {register_file}")
                QMessageBox.warning(self, "错误", "注册窗口文件不存在，请检查系统文件是否完整！")
                return

            # 尝试导入RegisterWindow类
            try:
                from gui.register_window import RegisterWindow
                logging.info("成功导入RegisterWindow类")
            except ImportError as e:
                logging.error(f"导入RegisterWindow失败: {str(e)}")
                QMessageBox.warning(self, "错误", "无法加载注册窗口，请检查系统文件是否完整！")
                return

            # 创建注册窗口实例
            try:
                self.register_window = RegisterWindow(self)
                logging.info("成功创建RegisterWindow实例")
            except Exception as e:
                logging.error(f"创建RegisterWindow实例失败: {str(e)}")
                QMessageBox.warning(self, "错误", "创建注册窗口失败，请稍后重试！")
                return

            # 显示注册窗口
            try:
                self.register_window.show()
                logging.info("成功显示注册窗口")
            except Exception as e:
                logging.error(f"显示注册窗口失败: {str(e)}")
                QMessageBox.warning(self, "错误", "显示注册窗口失败，请稍后重试！")
                return

            # 隐藏登录窗口
            try:
                self.hide()
                logging.info("成功隐藏登录窗口")
            except Exception as e:
                logging.error(f"隐藏登录窗口失败: {str(e)}")
                QMessageBox.warning(self, "错误", "切换窗口失败，请稍后重试！")
                return

        except Exception as e:
            logging.error(f"打开注册窗口时发生未知错误: {str(e)}")
            QMessageBox.warning(self, "错误", f"打开注册窗口失败：{str(e)}\n请稍后重试！")

    def show_reset_password(self, event):
        """显示找回密码窗口"""
        from gui.reset_password_window import ResetPasswordWindow
        self.reset_window = ResetPasswordWindow(self)
        self.reset_window.show()
        self.hide()

    def show_main_window(self, username):
        """显示主界面"""
        self.welcome_window = WelcomeWindow(username)
        self.welcome_window.show()
        self.close()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        # 设置主窗口
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 800)  # 增加窗口大小
        MainWindow.setWindowTitle("欢迎使用养老需求分析系统")
        MainWindow.setFixedSize(1200, 800)  # 固定窗口大小

        # 创建中央部件
        self.centralwidget = QWidget(MainWindow)
        MainWindow.setCentralWidget(self.centralwidget)

        # 设置背景图片
        try:
            current_dir = os.path.dirname(os.path.abspath(__file__))
            background_path = os.path.join(os.path.dirname(current_dir), 'resources', 'background.png')
            logging.info(f"加载背景图片: {background_path}")

            if os.path.exists(background_path):
                palette = QPalette()
                image = QImage(background_path)
                if not image.isNull():
                    scaled_image = image.scaled(
                        MainWindow.size(),
                        Qt.KeepAspectRatioByExpanding,
                        Qt.SmoothTransformation
                    )
                    brush = QBrush(scaled_image)
                    palette.setBrush(QPalette.Window, brush)
                    MainWindow.setPalette(palette)
                    logging.info("背景图片设置成功")
                else:
                    logging.error("背景图片加载失败")
            else:
                logging.error(f"背景图片文件不存在: {background_path}")
        except Exception as e:
            logging.error(f"设置背景图片失败: {str(e)}")

        # 创建一个半透明的白色面板
        self.login_panel = QFrame(self.centralwidget)
        self.login_panel.setGeometry(400, 100, 400, 600)  # 调整登录面板位置和大小
        self.login_panel.setStyleSheet("""
            QFrame {
                background-color: rgba(255, 255, 255, 200);
                border-radius: 20px;
                border: 2px solid rgba(255, 255, 255, 255);
            }
        """)

        # 创建垂直布局
        layout = QVBoxLayout(self.login_panel)
        layout.setSpacing(25)  # 增加间距
        layout.setContentsMargins(40, 40, 40, 40)  # 增加边距

        # 标题
        title = QLabel("欢迎使用养老需求分析系统")
        title.setFont(QFont("Microsoft YaHei", 18, QFont.Bold))  # 调整字体大小
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("""
            color: #333333;
            padding: 10px;
            background: none;
            margin: 0;
            white-space: nowrap;  /* 禁止换行 */
        """)
        title.setMinimumWidth(320)  # 设置最小宽度
        layout.addWidget(title)

        # 添加一些空间
        layout.addSpacing(30)

        # 用户名输入
        self.username = QLineEdit()
        self.username.setPlaceholderText("请输入用户名")
        self.username.setFixedHeight(45)  # 增加输入框高度
        layout.addWidget(self.username)

        # 密码输入
        self.password = QLineEdit()
        self.password.setPlaceholderText("请输入密码")
        self.password.setEchoMode(QLineEdit.Password)
        self.password.setFixedHeight(45)
        layout.addWidget(self.password)

        # 验证码布局
        captcha_layout = QHBoxLayout()
        captcha_layout.setSpacing(5)  # 减小组件间距

        # 验证码输入框
        self.yanzhengma = QLineEdit()
        self.yanzhengma.setPlaceholderText("验证码")  # 简化提示文字
        self.yanzhengma.setFixedHeight(45)
        self.yanzhengma.setFixedWidth(80)  # 减小输入框宽度
        self.yanzhengma.setStyleSheet("""
            QLineEdit {
                padding: 5px;  /* 减小内边距 */
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: white;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 1px solid #4CAF50;
            }
        """)
        captcha_layout.addWidget(self.yanzhengma)

        # 验证码图片标签
        self.captcha_label = QLabel()
        self.captcha_label.setFixedSize(180, 45)  # 调整验证码图片宽度
        self.captcha_label.setStyleSheet("""
            QLabel {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: white;
                padding: 2px;
            }
        """)
        captcha_layout.addWidget(self.captcha_label)

        # 刷新验证码按钮
        self.refresh_captcha_btn = QPushButton("刷新")
        self.refresh_captcha_btn.setFixedSize(45, 45)  # 调整刷新按钮为正方形
        self.refresh_captcha_btn.setCursor(Qt.PointingHandCursor)
        self.refresh_captcha_btn.setStyleSheet("""
            QPushButton {
                background-color: #f8f9fa;
                border: 1px solid #ddd;
                border-radius: 4px;
                color: #333;
                font-size: 12px;
                padding: 0px;  /* 移除内边距 */
            }
            QPushButton:hover {
                background-color: #e9ecef;
            }
            QPushButton:pressed {
                background-color: #dee2e6;
            }
        """)
        captcha_layout.addWidget(self.refresh_captcha_btn)

        # 添加弹性空间，确保组件靠左对齐
        captcha_layout.addStretch()

        layout.addLayout(captcha_layout)

        # 复选框布局
        checkbox_layout = QHBoxLayout()
        checkbox_layout.setAlignment(Qt.AlignCenter)

        # 记住密码复选框
        self.checkBox_2 = QCheckBox("记住密码")
        self.checkBox_2.setFont(QFont("Microsoft YaHei", 11))
        checkbox_layout.addWidget(self.checkBox_2)

        # 添加一些间距
        checkbox_layout.addSpacing(30)

        # 自动登录复选框
        self.checkBox = QCheckBox("自动登录")
        self.checkBox.setFont(QFont("Microsoft YaHei", 11))
        checkbox_layout.addWidget(self.checkBox)

        layout.addLayout(checkbox_layout)

        # 忘记密码链接
        self.forget_password_link = QLabel("忘记密码？")
        self.forget_password_link.setAlignment(Qt.AlignCenter)
        self.forget_password_link.setStyleSheet("""
            QLabel {
                color: #4CAF50;
                text-decoration: underline;
                cursor: pointer;
            }
            QLabel:hover {
                color: #45a049;
            }
        """)
        self.forget_password_link.setCursor(Qt.PointingHandCursor)
        layout.addWidget(self.forget_password_link)

        # 添加一些空间
        layout.addSpacing(10)

        # 登录按钮布局
        button_layout = QHBoxLayout()

        # 注册按钮
        self.register_btn = QPushButton("注册账号")
        self.register_btn.setFixedSize(150, 50)
        self.register_btn.setFont(QFont("Microsoft YaHei", 13))
        self.register_btn.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #5a6268;
            }
            QPushButton:pressed {
                background-color: #545b62;
            }
        """)
        button_layout.addWidget(self.register_btn)

        # 添加一些间距
        button_layout.addSpacing(20)

        # 登录按钮
        self.pushButton = QPushButton("登 录")
        self.pushButton.setFixedSize(150, 50)
        self.pushButton.setFont(QFont("Microsoft YaHei", 13))
        button_layout.addWidget(self.pushButton)

        layout.addLayout(button_layout)

        # 设置样式
        style = """
            QLineEdit {
                padding: 8px 15px;
                border: 1px solid #ddd;
                border-radius: 5px;
                background-color: white;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 1px solid #4CAF50;
            }
            QPushButton#pushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton#pushButton:hover {
                background-color: #45a049;
            }
            QPushButton#pushButton:pressed {
                background-color: #3d8b40;
            }
            QCheckBox {
                color: #333;
                spacing: 5px;
            }
            QCheckBox::indicator {
                width: 18px;
                height: 18px;
            }
            QCheckBox::indicator:unchecked {
                border: 2px solid #999;
                border-radius: 3px;
                background-color: white;
            }
            QCheckBox::indicator:checked {
                border: 2px solid #4CAF50;
                border-radius: 3px;
                background-color: #4CAF50;
            }
        """
        MainWindow.setStyleSheet(style)

        QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "登录"))
        self.username.setPlaceholderText(_translate("MainWindow", "请输入用户名"))
        self.password.setPlaceholderText(_translate("MainWindow", "请输入密码"))
        self.yanzhengma.setPlaceholderText(_translate("MainWindow", "请输入验证码"))
        self.checkBox.setText(_translate("MainWindow", "自动登录"))
        self.checkBox_2.setText(_translate("MainWindow", "记住密码"))
        self.pushButton.setText(_translate("MainWindow", "登 录"))


if __name__ == "__main__":
    import sys
    from PyQt5.QtWidgets import QApplication

    app = QApplication(sys.argv)
    window = LoginWindow()
    window.show()
    sys.exit(app.exec_())